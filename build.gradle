plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

version = '0.4.0'
group = 'com.EntertainmentViet'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	springBootVersion = '2.7.1'
	springVersion = '5.7.2'
	springAwsVersion = "2.2.6.RELEASE"
	hibernateVersion = '5.6.9.Final'
	hibernateTypeVersion = "2.17.1"
	queryDslVersion = '5.0.0'
	mapstructVersion = "1.5.2.Final"
	lombokVersion = "1.18.22"
	lombokMapstructBindingVersion = "0.2.0"
	commonLangVersion = "3.12.0"
	commonCollectionVersion = "4.4"
	commonTextVersion = "1.9"
	commonsIoVersion = "2.11.0"
	springDocVersion = "1.6.9"
	gsonVersion = "2.10"
	cronParserVersion = "3.5"
	jsoupVersion = "1.15.4"
}

dependencies {
	// Hibernate
	implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
	implementation "com.vladmihalcea:hibernate-types-55:${hibernateTypeVersion}"
	implementation "org.hibernate:hibernate-spatial:${hibernateVersion}"
	implementation "org.flywaydb:flyway-core"
	implementation "com.bedatadriven:jackson-datatype-jts:2.4"
	implementation 'org.wololo:jts2geojson:0.18.1'
	annotationProcessor 'org.hibernate:hibernate-jpamodelgen'

	// QueryDsl
	implementation "com.querydsl:querydsl-core:${queryDslVersion}"
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jpa"
	annotationProcessor "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:general"

	// Spring Framework
	implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}"
	implementation "org.springframework.security:spring-security-messaging:${springVersion}"
	implementation "org.springframework.boot:spring-boot-starter-mail:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-freemarker:${springBootVersion}"

	// Helper Util
	implementation 'org.apache.httpcomponents:httpclient'
	implementation "org.apache.commons:commons-lang3:${commonLangVersion}"
	implementation "org.apache.commons:commons-collections4:${commonCollectionVersion}"
	implementation "org.apache.commons:commons-text:${commonTextVersion}"
	implementation "commons-io:commons-io:${commonsIoVersion}"
	implementation "com.google.code.gson:gson:${gsonVersion}"
	implementation "net.redhogs.cronparser:cron-parser-spring:${cronParserVersion}"
	implementation "org.jsoup:jsoup:${jsoupVersion}"

	// Lombok + Mapstruct
	implementation "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	compileOnly "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	// Spring docs
	implementation "org.springdoc:springdoc-openapi-ui:${springDocVersion}"

	// AWS
	implementation "org.springframework.cloud:spring-cloud-starter-aws:${springAwsVersion}"

	// Test
	runtimeOnly "org.postgresql:postgresql"
	testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
	testImplementation "org.springframework.security:spring-security-test:${springVersion}"
}

tasks.named('test') {
	useJUnitPlatform()
}

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean